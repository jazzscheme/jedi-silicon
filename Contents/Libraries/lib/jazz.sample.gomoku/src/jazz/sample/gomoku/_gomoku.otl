(module jazz.sample.gomoku jazz
  (export (jazz.sample.gomoku.autoload))
  (import (jazz.sample.game))
  (definition package EMPTY <fx>)
  (definition package BLACK <fx>)
  (definition package WHITE <fx>)
  (definition package Search-Depth)
  (definition package Candidates)
  (class Gomoku-Player extends Player
    (slot game getter generate)
    (slot me getter generate)
    (slot opponent getter generate)
    (method override (initialize self game me))
    (method override (print self output readably))
    (method package (present self)))
  (hub get-game)
  (hub get-me)
  (hub get-opponent)
  (hub present)
  (class Gomoku-Human extends Gomoku-Player
    (method override (player-kind self)))
  (class Square extends Object
    (slot game getter generate)
    (slot line <fx> getter generate)
    (slot col <fx> getter generate)
    (slot token <fx> accessors generate)
    (slot lines <list> accessors generate)
    (method override (initialize self game line col))
    (method override (print self output readably)))
  (hub get-line)
  (hub get-col)
  (hub get-token)
  (hub set-token)
  (hub get-lines)
  (hub set-lines)
  (definition package (moku-square? size row col))
  (definition package (present-line game line))
  (definition package (present-col game col))
  (definition package (present-move game move))
  (class 5-Line extends Object
    (slot first <Square> getter generate)
    (slot second <Square> getter generate)
    (slot third <Square> getter generate)
    (slot fourth <Square> getter generate)
    (slot fifth <Square> getter generate)
    (method override (initialize self first second third fourth fifth))
    (method package (count-token self who <fx>) <fx>))
  (hub get-first)
  (hub get-second)
  (hub get-third)
  (hub get-fourth)
  (hub get-fifth)
  (hub count-token)
  (definition package (line=? l1 l2))
  (class Gomoku-Game extends Game
    (slot board-rows accessors generate)
    (slot board-columns accessors generate)
    (slot board-size accessors generate)
    (slot board accessors generate)
    (slot available-moves accessors generate)
    (method override (initialize self . rest))
    (method (make-board self))
    (method (make-availables self))
    (definition directions)
    (method (setup-lines self))
    (method (compute-lines self square))
    (method (find-next self dir row col n))
    (method public (iterate-board self proc))
    (method package (board-ref self rank) <Square>)
    (method (square-rank self row col) <fx>)
    (method package (get-square self row col) <Square>)
    (method (find-square self row col) <Square+>)
    (method override (play self move token))
    (method override (unplay self move))
    (method override (play-move self move))
    (method override (win? self move token))
    (method override (draw? self move token)))
  (hub get-board-rows)
  (hub set-board-rows)
  (hub get-board-columns)
  (hub set-board-columns)
  (hub get-board-size)
  (hub set-board-size)
  (hub get-board)
  (hub set-board)
  (hub get-available-moves)
  (hub set-available-moves)
  (hub make-board)
  (hub make-availables)
  (hub setup-lines)
  (hub compute-lines)
  (hub find-next)
  (hub iterate-board)
  (hub board-ref)
  (hub square-rank)
  (hub get-square)
  (hub find-square))
